#!/usr/bin/env python

from typing import Dict, List
import sys
import os
from uuid import uuid4
from tempfile import gettempdir

from Bio.PDB.Residue import Residue
from Bio.PDB.PDBParser import PDBParser
from pymol import cmd as pymol_cmd


pdb_parser = PDBParser()


tmp_dir = gettempdir()
reference_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), "data/ref.pdb")



def align(mobile_path: str) -> str:

    alignment_name = uuid4()
    alignment_path = os.path.join(tmp_dir, f"{alignment_name}.aln")

    # init pymol
    pymol_cmd.reinitialize()

    # load mobile structure
    pymol_cmd.load(mobile_path, 'mobile')
    pymol_cmd.load(reference_path, 'reference')

    # align
    r = pymol_cmd.align("mobile", "reference", object="alignment")
    if r[1] == 0:
        raise ValueError("No residues aligned")

    # save
    pymol_cmd.save(alignment_path, selection="alignment", format="aln")

    # clean up
    pymol_cmd.remove("all")

    return alignment_path


def parse_clustal(path: str) -> Dict[str, str]:

    alignment = {}
    with open(path, 'rt') as f:
        for line in f:
            i = line.find(' ')
            k = line[:i].strip()
            v = line[i:].strip()

            if len(k) > 0 and len(v) > 0:
                alignment[k] = alignment.get(k, '') + v

    return alignment


def list_aligned_residues(alignment_path: str, pdb_path: str) -> List[Residue]:

    structure = pdb_parser.get_structure('mobile', pdb_path)
    model = list(structure.get_models())[0]
    residues = []
    for chain in sorted(model.get_chains(), key=lambda c: c.get_id()):
        residues += list(chain.get_residues())

    alignment = parse_clustal(alignment_path)
    aligned_reference = alignment['reference']
    aligned_mobile = alignment['mobile']

    aligned_index = []
    for i in range(len(aligned_reference)):
        if aligned_reference[i] != '-':
            aligned_index.append(len(aligned_mobile[:i].replace('-', '')))

    aligned_residues = [residues[i] for i in aligned_index]

    return aligned_residues


if __name__ == "__main__":

    if len(sys.argv) == 1:
        print("Please provide at least one pdb file path")

    for pdb_path in sys.argv[1:]:
        alignment_path = align(pdb_path)
        residues = list_aligned_residues(alignment_path, pdb_path)

        print(pdb_path, ",".join([str(r.get_id()[1]) for r in residues]))
